I"æM<h1 id="data-structure-basics">Data Structure Basics</h1>

<p><strong>Data Structures</strong> are a means of organizing and storing data such that we can perform operations on the data efficiently. There are many types of data structures, each of which are used for a specific task.</p>

<h2 id="arrays">Arrays</h2>

<p>An array  is a data structure of fixed size that store items of a single type. Arrays are indexed. This allows elements to be randomly accessed.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span><span class="p">[]</span> <span class="n">grades</span><span class="p">;</span>
<span class="n">grades</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[</span><span class="m">35</span><span class="p">];</span>

<span class="n">Student</span><span class="p">[]</span> <span class="n">students</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Student</span><span class="p">[</span><span class="m">45</span><span class="p">];</span>

<span class="n">grades</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="m">97</span><span class="p">;</span>

<span class="n">students</span><span class="p">[</span><span class="m">14</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Student</span><span class="p">();</span>

<span class="kt">double</span><span class="p">[]</span> <span class="n">temperatures</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">double</span><span class="p">[]</span> <span class="p">{</span> <span class="m">14.5</span><span class="p">,</span> <span class="m">18.6</span><span class="p">,</span> <span class="m">23.1</span><span class="p">,</span> <span class="m">34.7</span> <span class="p">};</span>

<span class="kt">string</span><span class="p">[]</span> <span class="n">letterGrades</span> <span class="p">=</span> <span class="p">{</span> <span class="s">"F"</span><span class="p">,</span> <span class="s">"D"</span><span class="p">,</span> <span class="s">"C"</span><span class="p">,</span> <span class="s">"C+"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">,</span> <span class="s">"B+"</span><span class="p">,</span> <span class="s">"A"</span><span class="p">,</span> <span class="s">"A+"</span> <span class="p">};</span>

<span class="k">foreach</span><span class="p">(</span><span class="kt">double</span> <span class="n">temperature</span> <span class="k">in</span> <span class="n">temperatures</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="alert alert-warning">Inserting and deleting elements is not possible because arrays are a fixed size. You can however create a new array, using the elements of an array, with more or less elements.</p>

<p class="alert alert-note">The <code class="language-plaintext highlighter-rouge">System.Array</code> class defines methods for working with arrays.</p>

<h2 id="collections">Collections</h2>

<p><strong>Collections</strong> are data structures used to manage groups of related object. Although arrays can store references to objects, collections provide a more flexible way to work with groups of objects. Collections can grow and shrink dynamically.</p>

<h3 id="standard-vs-generic">Standard vs. Generic</h3>

<p>If the collection contains elements of a single type, you can use one of the <strong>Generic</strong> collection types. These types are found within the <code class="language-plaintext highlighter-rouge">System.Collections.Generic</code> namespace. Generic collections are type safe, only allowing the declared type to be added to it. When you retrieve an element, you wonâ€™t have to determine the type or convert it.</p>

<p class="alert alert-note">Microsoft recommends you avoid using standard collections. They recommend using the generic equivalent.</p>

<h2 id="listt">List&lt;T&gt;</h2>

<p>Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">names</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>

<span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">numbers</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>

<span class="n">names</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Kenny"</span><span class="p">);</span>
<span class="n">names</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Matt"</span><span class="p">);</span>
<span class="n">names</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Nick"</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span> <span class="c1">// Kenny</span>

<span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span> <span class="k">in</span> <span class="n">names</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Kenny</span>
<span class="c1">// Matt</span>
<span class="c1">// Nick</span>

<span class="n">names</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="s">"Matt"</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">names</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span> <span class="c1">// 2</span>

<span class="n">names</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="dictionarytkey-tvalue">Dictionary&lt;TKey, TValue&gt;</h2>

<p>Represents a collection of key/value pairs that are organized based on the key.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="n">spells</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;();</span>

<span class="n">spells</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Smite"</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
<span class="n">spells</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Shadow Word: Pain"</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
<span class="n">spells</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Mind Blast"</span><span class="p">,</span> <span class="m">5</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">spells</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span> <span class="c1">// 3</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">spells</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="s">"Smite"</span><span class="p">));</span> <span class="c1">// true</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Spell level: {0}"</span><span class="p">,</span> <span class="n">spells</span><span class="p">[</span><span class="s">"Mind Blast"</span><span class="p">]);</span> <span class="c1">// Spell level: 5</span>

<span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">key</span> <span class="k">in</span> <span class="n">spells</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"{0} is level {1}."</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">spells</span><span class="p">[</span><span class="n">key</span><span class="p">]);</span>
<span class="p">}</span>

<span class="c1">// Smite is level 1.</span>
<span class="c1">// Shadow Word: Pain is level 2.</span>
<span class="c1">// Mind Blast is level 5.</span>

<span class="n">spells</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="s">"Smite"</span><span class="p">);</span>

<span class="n">spells</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="sortedlisttkey-tvalue">SortedList&lt;TKey, TValue&gt;</h2>

<p>Represents a collection of key/value pairs that are sorted by key based on the associated <code class="language-plaintext highlighter-rouge">IComparer&lt;T&gt;</code> implementation. The <code class="language-plaintext highlighter-rouge">SortedList</code> will sort elements by key. Keys are sorted based on how objects of that type are sorted. Each time an element is added the <code class="language-plaintext highlighter-rouge">SortedList</code> will reorder its elements.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">decimal</span><span class="p">&gt;</span> <span class="n">menuItems</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">decimal</span><span class="p">&gt;();</span>

<span class="n">menuItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Pizza"</span><span class="p">,</span> <span class="m">15</span><span class="p">);</span>
<span class="n">menuItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Hot Dog"</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
<span class="n">menuItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Noodles"</span><span class="p">,</span> <span class="m">5</span><span class="p">);</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">menuItems</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span> <span class="c1">// 3</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">menuItems</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="s">"Noodles"</span><span class="p">));</span> <span class="c1">// true</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Hot dog price: {0:C}"</span><span class="p">,</span> <span class="n">menuItems</span><span class="p">[</span><span class="s">"Hot Dog"</span><span class="p">]);</span> <span class="c1">// Hot dog price: $2.00</span>

<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">menuItems</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"{0} is {1:C}"</span><span class="p">,</span> <span class="n">menuItems</span><span class="p">.</span><span class="n">Keys</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">menuItems</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="c1">// Hot Dog is $2.00</span>
<span class="c1">// Noodles is $5.00</span>
<span class="c1">// Pizza is $15.00</span>

<span class="n">menuItems</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="s">"Pizza"</span><span class="p">);</span>
<span class="n">menuItems</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
</code></pre></div></div>

<p class="alert alert-error">An <code class="language-plaintext highlighter-rouge">ArgumentException</code> is thrown when you attempt to add a duplicate key.</p>

<h2 id="stackt">Stack&lt;T&gt;</h2>

<p>Represents a last in, first out (LIFO) collection of objects.  Stacks have two key operations:</p>

<ol>
  <li><strong>Push</strong> - Inserts an element onto the top of the stack.</li>
  <li><strong>Pop</strong> - Removes the topmost element and returns it.</li>
</ol>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">friends</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>

<span class="n">friends</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="s">"Kenny"</span><span class="p">);</span>
<span class="n">friends</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="s">"Matt"</span><span class="p">);</span>
<span class="n">friends</span><span class="p">.</span><span class="nf">Push</span><span class="p">(</span><span class="s">"Nick"</span><span class="p">);</span>

<span class="kt">string</span> <span class="n">friend</span> <span class="p">=</span> <span class="n">friends</span><span class="p">.</span><span class="nf">Pop</span><span class="p">();</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">friend</span><span class="p">);</span> <span class="c1">// Nick</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">friends</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span> <span class="c1">// 2</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">friends</span><span class="p">.</span><span class="nf">Peek</span><span class="p">());</span> <span class="c1">// Matt</span>

<span class="n">friends</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="queuet">Queue&lt;T&gt;</h2>

<p>Represents a first in, first out (FIFO) collection of objects. Queues have two key operations:</p>

<ol>
  <li><strong>Enqueue</strong> - Inserts an element onto the end of the queue.</li>
  <li><strong>Dequeue</strong> - Removes the element at the beginning of the queue and returns it.</li>
</ol>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Queue</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">enemies</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>

<span class="n">enemies</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="s">"Kenny"</span><span class="p">);</span>
<span class="n">enemies</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="s">"Matt"</span><span class="p">);</span>
<span class="n">enemies</span><span class="p">.</span><span class="nf">Enqueue</span><span class="p">(</span><span class="s">"Nick"</span><span class="p">);</span>

<span class="kt">string</span> <span class="n">enemy</span> <span class="p">=</span> <span class="n">enemies</span><span class="p">.</span><span class="nf">Dequeue</span><span class="p">();</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">enemy</span><span class="p">);</span> <span class="c1">// Kenny</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">enemies</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span> <span class="c1">// 2</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">enemies</span><span class="p">.</span><span class="nf">Peek</span><span class="p">());</span> <span class="c1">// Matt</span>

<span class="n">enemies</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/collections" target="_blank">Collections</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1" target="_blank">List</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2" target="_blank">Dictionary</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.sortedlist-2" target="_blank">SortedList</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.stack-1" target="_blank">Stack</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.queue-1" target="_blank">Queue</a></li>
</ul>
:ET