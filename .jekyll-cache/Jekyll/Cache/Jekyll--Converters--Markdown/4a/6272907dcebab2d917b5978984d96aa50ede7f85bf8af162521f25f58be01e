I"‰<h1 class="no_toc" id="method-tests">Method Tests</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of Contents</h2>

<ol id="markdown-toc">
  <li><a href="#void-methods" id="markdown-toc-void-methods">Void Methods</a></li>
  <li><a href="#non-void-methods" id="markdown-toc-non-void-methods">Non-Void Methods</a></li>
</ol>

<h2 id="void-methods">Void Methods</h2>

<p><strong>Test Case</strong>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: left">Test Case</th>
      <th style="text-align: left">Test Data</th>
      <th style="text-align: left">Expected</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: left">Add money</td>
      <td style="text-align: left">Initial amount of money: 100, Parameter amount: 60</td>
      <td style="text-align: left">Amount of money state: 160</td>
    </tr>
  </tbody>
</table>

<p><strong>Testing Goal</strong>: Invoke the method and verify the object‚Äôs state.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">AddMoney_PositiveAmount_StateUpdated</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Kenny"</span><span class="p">;</span>
    <span class="kt">decimal</span> <span class="n">amountOfMoney</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

    <span class="c1">// Act</span>
    <span class="n">person</span><span class="p">.</span><span class="nf">AddMoney</span><span class="p">(</span><span class="m">60</span><span class="p">);</span>

    <span class="kt">decimal</span> <span class="n">expected</span> <span class="p">=</span> <span class="m">160</span><span class="p">;</span>

    <span class="c1">// Reflection</span>
    <span class="n">PrivateObject</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">// Obtain object state</span>
    <span class="kt">decimal</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"amountOfMoney"</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Notes</strong>:</p>

<ul>
  <li>The outcome of this method is to change the state and is verified by using <code class="language-plaintext highlighter-rouge">PrivateObject</code>.</li>
</ul>

<h2 id="non-void-methods">Non-Void Methods</h2>

<p><strong>Test Case</strong>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: left">Test Case</th>
      <th style="text-align: left">Test Data</th>
      <th style="text-align: left">Expected</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: left">Return string representation of the Person</td>
      <td style="text-align: left">Initial name: Kenny, Initial amount of money: 123.45M</td>
      <td style="text-align: left">‚ÄúKenny - $123.45‚Äù</td>
    </tr>
  </tbody>
</table>

<p><strong>Testing Goal</strong>: Obtain the value returned from the method.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">ToString_ReturnsResult</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Kenny"</span><span class="p">;</span>
    <span class="kt">decimal</span> <span class="n">amountOfMoney</span> <span class="p">=</span> <span class="m">123.45</span><span class="n">M</span><span class="p">;</span>

    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

    <span class="c1">// Act</span>
    <span class="kt">string</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="nf">ToString</span><span class="p">();</span>

    <span class="kt">string</span> <span class="n">expected</span> <span class="p">=</span> <span class="s">"Kenny - $123.45"</span><span class="p">;</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Notes</strong>:</p>

<ul>
  <li>When a method returns a value, that value is captured to verify the test.</li>
</ul>
:ET