I"þ9<h1 class="no_toc" id="property-tests">Property Tests</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of Contents</h2>

<ol id="markdown-toc">
  <li><a href="#example-1---set-accessor-exception" id="markdown-toc-example-1---set-accessor-exception">Example 1 - Set Accessor Exception</a></li>
  <li><a href="#example-2---set-accessor-valid-value" id="markdown-toc-example-2---set-accessor-valid-value">Example 2 - Set Accessor Valid Value</a></li>
  <li><a href="#example-3---get-accessor" id="markdown-toc-example-3---get-accessor">Example 3 - Get Accessor</a></li>
  <li><a href="#auto-implemented-property-tests" id="markdown-toc-auto-implemented-property-tests">Auto-Implemented Property Tests</a></li>
</ol>

<h2 id="example-1---set-accessor-exception">Example 1 - Set Accessor Exception</h2>

<p><strong>Test Case</strong>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: left">Test Case</th>
      <th style="text-align: left">Test Data</th>
      <th style="text-align: left">Expected</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: left">Exception when the value is a negative value</td>
      <td style="text-align: left">Value: -1</td>
      <td style="text-align: left">ArgumentOutOfRangeException, Parameter: value, Message: The value must be zero or greater., State is not updated.</td>
    </tr>
  </tbody>
</table>

<p><strong>Testing Goal</strong>: Set the property to an invalid value.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">SetAmountOfMoney_NegativeAmount_Exception</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Kenny"</span><span class="p">;</span>
    <span class="kt">decimal</span> <span class="n">amountOfMoney</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

    <span class="c1">// Act &amp; Assert</span>
    <span class="n">ArgumentOutOfRangeException</span> <span class="n">exception</span> <span class="p">=</span> <span class="n">Assert</span><span class="p">.</span><span class="n">ThrowsException</span><span class="p">&lt;</span><span class="n">ArgumentOutOfRangeException</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="n">person</span><span class="p">.</span><span class="n">AmountOfMoney</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">);</span>

    <span class="c1">// Assert exception state</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="s">"value"</span><span class="p">,</span> <span class="n">exception</span><span class="p">.</span><span class="n">ParamName</span><span class="p">);</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="s">"The value must be zero or greater."</span><span class="p">,</span> <span class="nf">GetExceptionMessage</span><span class="p">(</span><span class="n">exception</span><span class="p">.</span><span class="n">Message</span><span class="p">));</span>

    <span class="c1">// Reflection</span>
    <span class="n">PrivateObject</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">// Obtain object state</span>
    <span class="kt">decimal</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"amountOfMoney"</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">amountOfMoney</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Notes</strong>:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">Assert.ThrowsException()</code> method is used since an exception is expected to occur and the state of the exception is verified.</li>
  <li>In most cases, when an exception is thrown in a <code class="language-plaintext highlighter-rouge">set</code> accessor, the state should not change to the invalid value. The final <code class="language-plaintext highlighter-rouge">Assert</code> statement verifies this.</li>
</ul>

<h2 id="example-2---set-accessor-valid-value">Example 2 - Set Accessor Valid Value</h2>

<p><strong>Test Case</strong>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: left">Test Case</th>
      <th style="text-align: left">Test Data</th>
      <th style="text-align: left">Expected</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: left">Sets the amount of money to zero</td>
      <td style="text-align: left">Initial amount of money: 100, Value: 0</td>
      <td style="text-align: left">0</td>
    </tr>
  </tbody>
</table>

<p><strong>Testing Goal</strong>: Sets the property to a valid value and verifies the state changed.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">SetAmountOfMoney_ZeroAmount_UpdateState</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Kenny"</span><span class="p">;</span>
    <span class="kt">decimal</span> <span class="n">amountOfMoney</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

    <span class="kt">decimal</span> <span class="n">expected</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="c1">// Act</span>
    <span class="n">person</span><span class="p">.</span><span class="n">AmountOfMoney</span> <span class="p">=</span> <span class="n">expected</span><span class="p">;</span>

    <span class="c1">// Reflection</span>
    <span class="n">PrivateObject</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

    <span class="c1">// Obtain object state</span>
    <span class="kt">decimal</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"amountOfMoney"</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Notes</strong>:</p>

<ul>
  <li>When testing a modification in state, the value you choose to change the state should be different than the initial value.</li>
  <li>The variable <code class="language-plaintext highlighter-rouge">expected</code> is a recommended practice as it makes the <code class="language-plaintext highlighter-rouge">Assert</code> statement clearer.</li>
  <li>Due to the result of the unit changing the state, accessing the <code class="language-plaintext highlighter-rouge">private</code> field is required to verify the test.</li>
</ul>

<h2 id="example-3---get-accessor">Example 3 - Get Accessor</h2>

<p><strong>Test Case</strong>:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">#</th>
      <th style="text-align: left">Test Case</th>
      <th style="text-align: left">Test Data</th>
      <th style="text-align: left">Expected</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: left">Gets the amount of money</td>
      <td style="text-align: left">Initial amount of money: 100</td>
      <td style="text-align: left">100</td>
    </tr>
  </tbody>
</table>

<p><strong>Testing Goal</strong>: Initialize the object and obtain its state.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">GetAmountOfMoney_ReturnsState</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Kenny"</span><span class="p">;</span>
    <span class="kt">decimal</span> <span class="n">amountOfMoney</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>
    
    <span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

    <span class="c1">// Act</span>
    <span class="kt">decimal</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">person</span><span class="p">.</span><span class="n">AmountOfMoney</span><span class="p">;</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">amountOfMoney</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Notes</strong>:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PrivateObject</code> should not be used in this test as no <code class="language-plaintext highlighter-rouge">private</code> member is accessed.</li>
</ul>

<h2 id="auto-implemented-property-tests">Auto-Implemented Property Tests</h2>

<p>When a property is auto-implemented, it will not have a field you can access. When you are in this situation, you will use the <code class="language-plaintext highlighter-rouge">GetProperty()</code> method of the <code class="language-plaintext highlighter-rouge">PrivateObject</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Shape</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">double</span> <span class="n">XCoordinate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Circle</span> <span class="p">:</span> <span class="n">Shape</span>
<span class="p">{</span>
    
<span class="p">}</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">SetXCoordinate_ModifyState</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">color</span> <span class="p">=</span> <span class="s">"Black"</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">77.7</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">xCoordinate</span> <span class="p">=</span> <span class="m">123.4</span><span class="p">;</span>

    <span class="n">Circle</span> <span class="n">circle</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Circle</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>

    <span class="c1">// Act</span>
    <span class="n">circle</span><span class="p">.</span><span class="n">XCoordinate</span> <span class="p">=</span> <span class="n">xCoordinate</span><span class="p">;</span>

    <span class="n">PrivateObject</span> <span class="n">target</span><span class="p">;</span>
    <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">circle</span><span class="p">);</span>

    <span class="kt">double</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetProperty</span><span class="p">(</span><span class="s">"XCoordinate"</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">xCoordinate</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET