I"c<h1 class="no_toc" id="data-types">Data Types</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of Contents</h2>

<ol id="markdown-toc">
  <li><a href="#value-types" id="markdown-toc-value-types">Value Types</a>    <ol>
      <li><a href="#boolean-type" id="markdown-toc-boolean-type">Boolean Type</a></li>
      <li><a href="#decimal-type" id="markdown-toc-decimal-type">Decimal Type</a></li>
    </ol>
  </li>
  <li><a href="#reference-types" id="markdown-toc-reference-types">Reference Types</a>    <ol>
      <li><a href="#object-type" id="markdown-toc-object-type">Object Type</a></li>
      <li><a href="#string-type" id="markdown-toc-string-type">String Type</a></li>
    </ol>
  </li>
  <li><a href="#further-reading" id="markdown-toc-further-reading">Further Reading</a></li>
</ol>

<h2 id="value-types">Value Types</h2>

<p>All the data types you are familiar with exist in C#:</p>

<ul>
  <li>byte, char, double, float, int, long, short</li>
</ul>

<h3 id="boolean-type">Boolean Type</h3>

<p>The boolean type exists in C#, but uses a different keyword than Java:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">isDone</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="decimal-type">Decimal Type</h3>

<p>C# also includes a floating-point type used for currency values. It is more accurate than using the <code class="language-plaintext highlighter-rouge">double</code> type.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">decimal</span> <span class="n">paymentAmount</span> <span class="p">=</span> <span class="m">34.23</span><span class="n">M</span><span class="p">;</span>
</code></pre></div></div>

<p class="alert alert-note">Like Java, a floating-point literal (Ex. <code class="language-plaintext highlighter-rouge">34.23</code>) is considered a <code class="language-plaintext highlighter-rouge">double</code> type. A <code class="language-plaintext highlighter-rouge">float</code> literal is expressed by succeeding the literal value with an ‘F’ (Ex. <code class="language-plaintext highlighter-rouge">34.23F</code>) and a <code class="language-plaintext highlighter-rouge">decimal</code> literal with an ‘M’ (Ex. <code class="language-plaintext highlighter-rouge">34.23M</code>).</p>

<h2 id="reference-types">Reference Types</h2>

<h3 id="object-type">Object Type</h3>

<p>Like Java, the <code class="language-plaintext highlighter-rouge">object</code> type is the base type for all reference types (just written without the capital ‘O’). How the <code class="language-plaintext highlighter-rouge">object</code> type differs, is how it is the base type for all reference types and value types.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">object</span> <span class="n">widget</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="string-type">String Type</h3>

<p>In Java, the String type is referenced using the <code class="language-plaintext highlighter-rouge">String</code> class name. In C#, the String type is written as <code class="language-plaintext highlighter-rouge">string</code>, which is the alias to the <code class="language-plaintext highlighter-rouge">System.String</code> .NET type in the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/types/#the-common-type-system" target="_blank">Common Type System (CTS)</a>.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">firstName</span> <span class="p">=</span> <span class="s">"Chris"</span><span class="p">;</span><span class="err">`</span>
</code></pre></div></div>

<p>For the most part, you will not see any difference between the Java <code class="language-plaintext highlighter-rouge">String</code> and the C# <code class="language-plaintext highlighter-rouge">string</code>.</p>

<p class="alert alert-best-practices">It is best practice to be familiar with the members of the <code class="language-plaintext highlighter-rouge">string</code> type for any programming language you are developing with.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types" target="_blank">Integral Numeric Types</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types" target="_blank">Floating-point Numeric Types</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/numeric-conversions" target="_blank">Built-in Numeric Conversions</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/bool" target="_blank">Boolean Type</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char" target="_blank">Character Type</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated" target="_blank">String Interpolation</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim" target="_blank">String Verbatim Token</a></li>
</ul>
:ET