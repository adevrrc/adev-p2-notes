I"q&<h1 class="no_toc" id="console-inputoutput">Console Input/Output</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of Contents</h2>

<ol id="markdown-toc">
  <li><a href="#input--output-streams" id="markdown-toc-input--output-streams">Input / Output Streams</a></li>
  <li><a href="#output-text-to-the-console" id="markdown-toc-output-text-to-the-console">Output Text To the Console</a>    <ol>
      <li><a href="#formatting-output" id="markdown-toc-formatting-output">Formatting Output</a></li>
    </ol>
  </li>
  <li><a href="#reading-from-the-console" id="markdown-toc-reading-from-the-console">Reading From the Console</a></li>
  <li><a href="#further-reading" id="markdown-toc-further-reading">Further Reading</a></li>
</ol>

<h2 id="input--output-streams">Input / Output Streams</h2>

<p>In C# a stream is an abstract representation of a device on which input and output operations can be performed.</p>

<p>The devices which we can stream to and from are things like the operating system’s standard output (console), standard input (keyboard), and the file system.</p>

<p>You can think of a stream as a source or a destinations for a potentially unlimited sequence of bytes.</p>

<p>The <code class="language-plaintext highlighter-rouge">System.Console</code> class is a class that represents the standard input, output and error streams for console applications. The Console class is used for all input and output to the console.</p>

<h2 id="output-text-to-the-console">Output Text To the Console</h2>

<p>In Java, to output text to the console you needed to reference the standard output stream by using <code class="language-plaintext highlighter-rouge">System.out</code>. In C#, you can accomplish the same by using the <code class="language-plaintext highlighter-rouge">Console</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Console</span><span class="p">.</span><span class="n">Out</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Out</code> class member returns a reference to a <code class="language-plaintext highlighter-rouge">TextWriter</code> object. The <code class="language-plaintext highlighter-rouge">TextWriter</code> class has two method for outputting text to a stream:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Write()</code></li>
  <li><code class="language-plaintext highlighter-rouge">WriteLine()</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Write()</code> is equivalent to Java’s <code class="language-plaintext highlighter-rouge">java.io.PrintStream.print()</code> method and <code class="language-plaintext highlighter-rouge">WriteLine()</code> is equivalent to Java’s <code class="language-plaintext highlighter-rouge">java.io.PrintStream.println()</code>.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"This will output without a line break. "</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">Out</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"This will output with a line break."</span><span class="p">);</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This will output without a line break. This will output with a line break.
</code></pre></div></div>

<p>These output operations can be simplified by using the <code class="language-plaintext highlighter-rouge">Write()</code> and <code class="language-plaintext highlighter-rouge">WriteLine()</code> methods of the <code class="language-plaintext highlighter-rouge">Console</code> class.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Chris"</span><span class="p">;</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"Hello, "</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">name</span> <span class="p">+</span> <span class="s">"!"</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Today is going to be a great day!"</span><span class="p">);</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, Chris!
Today is going to be a great day!
</code></pre></div></div>

<h3 id="formatting-output">Formatting Output</h3>

<p><code class="language-plaintext highlighter-rouge">Write()</code> and <code class="language-plaintext highlighter-rouge">WriteLine()</code> are overloaded methods, with versions that work like Java’s <code class="language-plaintext highlighter-rouge">java.io.PrintStream.printf()</code> method.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"Chris"</span><span class="p">;</span>
<span class="n">DateTime</span> <span class="n">date</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Hello, {0}! Today is {1}, it's {2:HH:mm} now."</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">date</span><span class="p">.</span><span class="n">DayOfWeek</span><span class="p">,</span> <span class="n">date</span><span class="p">);</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, Chris! Today is Tuesday, it's 11:14 now.
</code></pre></div></div>

<p>The “{}” signifies a placeholder and the integer value within it curly-braces signifies an index used to reference the arguments after the string argument. Formatting strings like this is called <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting" target="_blank">Composite Formatting</a>.</p>

<h2 id="reading-from-the-console">Reading From the Console</h2>

<p>The <code class="language-plaintext highlighter-rouge">Console</code> class can also be used for reading input from the console using the <code class="language-plaintext highlighter-rouge">Read()</code> and <code class="language-plaintext highlighter-rouge">ReadLine()</code> methods. <code class="language-plaintext highlighter-rouge">Read()</code> will read the next character from the stream and <code class="language-plaintext highlighter-rouge">ReadLine()</code> reads an entire line of data from the stream.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"(Y/N)? "</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">choice</span> <span class="p">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">Console</span><span class="p">.</span><span class="nf">Read</span><span class="p">();</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">choice</span><span class="p">);</span>

<span class="c1">// flush output buffer</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">();</span> 

<span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="s">"Enter your full name: "</span><span class="p">);</span>

<span class="kt">string</span> <span class="n">fullname</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>

<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">fullname</span><span class="p">);</span>
</code></pre></div></div>

<p>Output:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(Y/N)? y
y
Enter your full name: Kenny Omega
Kenny Omega
</code></pre></div></div>

<p class="alert alert-note">The <code class="language-plaintext highlighter-rouge">Console.In</code> class member returns a <code class="language-plaintext highlighter-rouge">TextReader</code> object. Using <code class="language-plaintext highlighter-rouge">Console.In</code> is not required when you use <code class="language-plaintext highlighter-rouge">Console.Read()</code> and <code class="language-plaintext highlighter-rouge">Console.ReadLine()</code>.</p>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.console" target="_blank">Console Class Documentation</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting" target="_blank">Composite Formatting</a></li>
</ul>
:ET