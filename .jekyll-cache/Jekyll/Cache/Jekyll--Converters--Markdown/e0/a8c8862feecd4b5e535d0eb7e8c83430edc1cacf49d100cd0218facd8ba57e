I"<h1 id="accessing-base-class-fields">Accessing Base Class Fields</h1>

<p>Derived classes inherit the attributes of its base class. If you coded the base class, part of your testing will include verifying that an objectâ€™s entire state is set.</p>

<p>Consider the follow class hierarchy:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Shape</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="n">color</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Circle</span> <span class="p">:</span> <span class="n">Shape</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">double</span> <span class="n">radius</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Part of testing the <code class="language-plaintext highlighter-rouge">Circle</code> class would be verifying the <code class="language-plaintext highlighter-rouge">color</code> state is correct.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Constructor_Color_Initialized</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">string</span> <span class="n">color</span> <span class="p">=</span> <span class="s">"Black"</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">radius</span> <span class="p">=</span> <span class="m">77.7</span><span class="p">;</span>

    <span class="c1">// Act</span>
    <span class="n">Circle</span> <span class="n">circle</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Circle</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">radius</span><span class="p">);</span>

    <span class="n">PrivateObject</span> <span class="n">target</span><span class="p">;</span>
    <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">circle</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PrivateType</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Shape</span><span class="p">)));</span>

    <span class="kt">string</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"color"</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">color</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
:ET