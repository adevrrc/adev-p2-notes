I"…5<h1 class="no_toc" id="writing-unit-tests">Writing Unit Tests</h1>

<h2 class="no_toc text-delta" id="table-of-contents">Table of Contents</h2>

<ol id="markdown-toc">
  <li><a href="#unit-test-classes" id="markdown-toc-unit-test-classes">Unit Test Classes</a>    <ol>
      <li><a href="#naming-convention" id="markdown-toc-naming-convention">Naming Convention</a></li>
    </ol>
  </li>
  <li><a href="#unit-test-methods" id="markdown-toc-unit-test-methods">Unit Test Methods</a>    <ol>
      <li><a href="#naming-convention-1" id="markdown-toc-naming-convention-1">Naming Convention</a></li>
    </ol>
  </li>
  <li><a href="#aaa-pattern" id="markdown-toc-aaa-pattern">AAA Pattern</a></li>
  <li><a href="#assert-class" id="markdown-toc-assert-class">Assert Class</a></li>
  <li><a href="#reflection" id="markdown-toc-reflection">Reflection</a>    <ol>
      <li><a href="#privateobject-class" id="markdown-toc-privateobject-class">PrivateObject Class</a></li>
      <li><a href="#privatetype-class" id="markdown-toc-privatetype-class">PrivateType Class</a></li>
    </ol>
  </li>
  <li><a href="#best-practices-for-writing-tests" id="markdown-toc-best-practices-for-writing-tests">Best Practices For Writing Tests</a></li>
  <li><a href="#test-method-examples" id="markdown-toc-test-method-examples">Test Method Examples</a></li>
  <li><a href="#further-reading" id="markdown-toc-further-reading">Further Reading</a></li>
</ol>

<p>After creating the test plan, you are now ready to start developing your unit tests.</p>

<h2 id="unit-test-classes">Unit Test Classes</h2>

<p>Declaring a unit test class is similar to declaring a regular class. The use of the <code class="language-plaintext highlighter-rouge">TestClass</code> attribute denotes the class as contain unit tests.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ADEV.UnitTesting</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">TestClass</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PersonTests</span>
    <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="alert alert-error">If your unit test class is missing the <code class="language-plaintext highlighter-rouge">TestClass</code> attribute, the Test Explorer will not recognize the class as containing unit tests.</p>

<h3 id="naming-convention">Naming Convention</h3>

<p>Unit test class identifiers are named by using the class name of the class you are testing followed by the word ‚ÄúTests‚Äù. The test class above is testing a class named <code class="language-plaintext highlighter-rouge">Person</code>, because the test class identifier is <code class="language-plaintext highlighter-rouge">PersonTests</code>.</p>

<h2 id="unit-test-methods">Unit Test Methods</h2>

<p>You will code unit test methods within the a class with the <code class="language-plaintext highlighter-rouge">TestClass</code> attribute. As a general guideline, you will write one unit test method per test case in your test plan.</p>

<p>Unit test methods are declared and defined like other methods. The use of the <code class="language-plaintext highlighter-rouge">TestMethod</code> attribute denotes the method is a unit test method.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ADEV.UnitTesting</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">TestClass</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PersonTests</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">TestMethod1</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="alert alert-error">If your unit test method is missing the <code class="language-plaintext highlighter-rouge">TestMethod</code> attribute, the Test Explorer will not recognize the method as a unit tests method.</p>

<h3 id="naming-convention-1">Naming Convention</h3>

<p>Unit test method identifiers will follow this general naming format: <code class="language-plaintext highlighter-rouge">UnitDescription_Data_Result</code></p>

<p>Example:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">ADEV.UnitTesting</span>
<span class="p">{</span>
    <span class="p">[</span><span class="n">TestClass</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PersonTests</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Constructor_NameNull_Exception</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="aaa-pattern">AAA Pattern</h2>

<p>The AAA (Arrange, Act, Assert) is a common pattern for writing unit test methods.</p>

<ul>
  <li>The <strong>Arrange</strong> part of the unit test defines test data and initializes an object used for the test.</li>
  <li>The <strong>Act</strong> part of the test invokes the unit being tested under the conditions of the test case.</li>
  <li>The <strong>Assert</strong> part of the test verifies that the unit being tested behaved as expected.</li>
</ul>

<h2 id="assert-class">Assert Class</h2>

<p>The <code class="language-plaintext highlighter-rouge">Assert</code> class contains a collection of methods to determine the result of a test. If the condition being tested is not met, an <code class="language-plaintext highlighter-rouge">AssertFailedException</code> is thrown.</p>

<p>Common Method</p>

<ul>
  <li><strong>AreEqual(Object, Object)</strong> - Tests whether the specified objects are equal and throws an exception if the two objects are not equal.</li>
  <li><strong>AreNotEqual(Object, Object)</strong> - Tests whether the specified values are unequal and throws an exception if the two values are equal.</li>
  <li><strong>IsTrue(Boolean)</strong> - Tests whether the specified condition is <code class="language-plaintext highlighter-rouge">true</code> and throws an exception if the condition is <code class="language-plaintext highlighter-rouge">false</code>.</li>
  <li><strong>IsFalse(Boolean)</strong> - Tests whether the specified condition is <code class="language-plaintext highlighter-rouge">false</code> and throws an exception if the condition is <code class="language-plaintext highlighter-rouge">true</code>.</li>
  <li><strong>ThrowsException&lt;T&gt;()</strong> - Tests whether the code specified by delegate action throws exact given exception of type <code class="language-plaintext highlighter-rouge">T</code> (and not of derived type) and throws <code class="language-plaintext highlighter-rouge">AssertFailedException</code> if code does not throws exception or throws exception of type other than <code class="language-plaintext highlighter-rouge">T</code>. This method returns a reference to the exception the exception if one is thrown.</li>
</ul>

<p class="alert alert-note">All <code class="language-plaintext highlighter-rouge">Assert</code> methods will throw an <code class="language-plaintext highlighter-rouge">AssertFailedException</code> when the condition is not met. The result of the test is a fail.</p>

<h2 id="reflection">Reflection</h2>

<p>Many of the tests you will develop will involve verifying the state of an object. State is stored in <code class="language-plaintext highlighter-rouge">private</code> fields in the class. To verify test cases where the result deals with object state, you will need to use a concept called <strong>Reflection</strong>.  Reflection is the ability to retrieve data that is normally not accessible at run-time.</p>

<p>In the testing you did prior to this topic, you would have normally called an accessor method to verify changes to state. This is no longer satisfactory, as one of your unit testing goals is to isolate the unit your are testing. This means you do not want to invoke other units of the class while testing a specific unit.</p>

<h3 id="privateobject-class">PrivateObject Class</h3>

<p>The <code class="language-plaintext highlighter-rouge">PrivateObject</code> class represents a <code class="language-plaintext highlighter-rouge">public</code> ‚Äúversion‚Äù of an object. The class contains methods to accesses <code class="language-plaintext highlighter-rouge">private</code> fields, methods, and properties.</p>

<p>To gain access to an object‚Äôs <code class="language-plaintext highlighter-rouge">private</code> members, construct an instance of <code class="language-plaintext highlighter-rouge">PrivateObject</code>, initializing it with a reference to the object you wish access its <code class="language-plaintext highlighter-rouge">private</code> members.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Person</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">amountOfMoney</span><span class="p">);</span>

<span class="n">PrivateObject</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>
</code></pre></div></div>

<p>Use the following methods of the <code class="language-plaintext highlighter-rouge">PrivateObject</code> class:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">GetField(String) : Object</code> - Returns the value of the specified field.</li>
  <li><code class="language-plaintext highlighter-rouge">SetField(String, Object) : void</code> - Sets the specified field to the specified value.</li>
  <li><code class="language-plaintext highlighter-rouge">Invoke(String, Object[]) : Object</code> - Invokes the specified method. The <code class="language-plaintext highlighter-rouge">Object[]</code> represents the arguments. Returns the result of the method.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PrivateObject</span> <span class="n">target</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PrivateObject</span><span class="p">(</span><span class="n">person</span><span class="p">);</span>

<span class="kt">decimal</span> <span class="n">actual</span> <span class="p">=</span> <span class="p">(</span><span class="kt">decimal</span><span class="p">)</span><span class="n">target</span><span class="p">.</span><span class="nf">GetField</span><span class="p">(</span><span class="s">"amountOfMoney"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="privatetype-class">PrivateType Class</h3>

<p>The <code class="language-plaintext highlighter-rouge">PrivateType</code> class is used like <code class="language-plaintext highlighter-rouge">PrivateObject</code>, but is used for Static Classes.</p>

<p class="alert alert-future-lesson">The <code class="language-plaintext highlighter-rouge">PrivateType</code> class is also used when gaining access to <code class="language-plaintext highlighter-rouge">base</code> class members.</p>

<h2 id="best-practices-for-writing-tests">Best Practices For Writing Tests</h2>

<p>Before you really dive into developing your unit tests, keep the following best practices in mind:</p>

<ol>
  <li>A unit test should only test a single outcome. Do not combine multiple outcomes into a single test method.</li>
  <li>A unit is tested in isolation of other units in the class (with the exception of the constructor).</li>
  <li>Always test constructor methods first.</li>
  <li>Complete all the tests for a unit before moving onto another unit.</li>
  <li>Group tests in your test class by unit, not by test type.</li>
  <li>Keep the code in your unit test method simple.</li>
  <li>Try to order your tests in order of dependency (when known or possible).</li>
  <li>No unit is too insignificant to test.</li>
</ol>

<h2 id="test-method-examples">Test Method Examples</h2>

<p>The following unit test method examples will follow the <a href="/adev2008/unit-testing/sample-test-plan">sample test plan</a>. Not every test case will be demonstrated here, as some of the test cases will produce similar unit test method implementation.</p>

<ol>
  <li>TOC</li>
</ol>

<h2 id="further-reading">Further Reading</h2>

<ul>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.assert?view=visualstudiosdk-2022" target="_blank">Assert Class</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.privateobject?view=visualstudiosdk-2022" target="_blank">PrivateObject Class</a></li>
  <li><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.testtools.unittesting.privatetype?view=visualstudiosdk-2022" target="_blank">PrivateType Class</a></li>
</ul>
:ET